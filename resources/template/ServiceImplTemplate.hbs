package {{packageName}}.service;

import club.itbus.core.model.Response;
import club.itbus.core.model.Paging;
import {{packageName}}.model.{{modelName}};

import com.google.common.base.Throwables;
import lombok.extern.slf4j.Slf4j;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Map;

/**
 * Desc:
 * Mail: {{author}}
 * Date: {{createdAt}}
 */
@Slf4j
@Service
public class {{serviceName}}Impl implements {{serviceName}} {

    @Autowired
    private {{modelName}}Dao {{LowerCase modelName}}Dao;

    @Override
    public Response<{{modelName}}> findById(Long id) {
        try{
            return Response.ok({{LowerCase modelName}}Dao.findById(id));
        }catch (Exception e){
            log.error("failed to find protocol by id:{}, cause:{}", id, Throwables.getStackTraceAsString(e));
            return Response.fail("protocol.find.fail");
        }
    }

    @Override
    public Response<Paging<{{modelName}}>> paging(Integer pageNo, Integer pageSize, Map<String, Object> criteria) {
        try{
            return Response.ok({{LowerCase modelName}}Dao.paging(pageNo, pageSize, criteria));
        }catch (Exception e){
            log.error("failed to paging {{modelName}}Dao by pageNo:{} pageSize:{}, cause:{}", pageNo, pageSize, Throwables.getStackTraceAsString(e));
            return Response.fail("{{modelName}}Dao.paging.fail");
        }
    }


    @Override
    public Response<Boolean> create({{modelName}} {{LowerCase modelName}}) {
        try{
            return Response.ok({{LowerCase modelName}}Dao.create({{LowerCase modelName}}));
        }catch (Exception e){
            log.error("failed to create {{LowerCase modelName}}, cause:{}", Throwables.getStackTraceAsString(e));
            return Response.fail("{{LowerCase modelName}}.create.fail");
        }
    }

    @Override
    public Response<Boolean> update({{modelName}} {{LowerCase modelName}}) {
        try{
            return Response.ok({{LowerCase modelName}}Dao.update({{LowerCase modelName}}));
        }catch (Exception e){
            log.error("failed to update {{LowerCase modelName}}, cause:{}", Throwables.getStackTraceAsString(e));
            return Response.fail("{{LowerCase modelName}}.update.fail");
        }
    }

}
