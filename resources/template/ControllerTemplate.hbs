
import io.terminus.boot.rpc.common.annotation.RpcConsumer;
import io.terminus.common.exception.JsonResponseException;
import io.terminus.common.model.Paging;
import io.terminus.common.model.Response;

import lombok.extern.slf4j.Slf4j;
import com.google.common.collect.Maps;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

/**
 * Desc:
 * Mail: {{$.email}}
 * Date: {{$.Now}}
 */
@Slf4j
@RestController
@RequestMapping
public class {{model}}s {

    @RpcConsumer
    private {{model}}WriteService {{LowerCase model}}WriteService;

    @RpcConsumer
    private {{model}}ReadService {{LowerCase model}}ReadService;

    @RequestMapping(value = "/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public {{model}} find{{model}}(@PathVariable Long id) {
        Response<{{model}}> response =  {{LowerCase model}}ReadService.findById(id);
        if (!response.isSuccess()) {
            throw new JsonResponseException(500, response.getError());
        }
        return response.getResult();
    }

    @RequestMapping(value = "/paging", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public Paging<{{model}}> paging{{model}}(@RequestParam(value = "pageNo", required = false) Integer pageNo,
                                                 @RequestParam(value = "pageSize", required = false) Integer pageSize) {

        Map<String, Object> criteria = Maps.newHashMap();

        Response<Paging<{{model}}>> result =  {{LowerCase model}}ReadService.paging(pageNo, pageSize, criteria);
        if(!result.isSuccess()){
            throw new JsonResponseException(result.getError());
        }
        return result.getResult();
    }

    /**
     * 创建
     * @param
     */
    @RequestMapping(value = "", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    public Long create{{model}}(@RequestBody {{model}} {{LowerCase model}}) {
        Response<Long> response = {{LowerCase model}}WriteService.create({{LowerCase model}});
        if (!response.isSuccess()) {
            throw new JsonResponseException(500, response.getError());
        }
        return response.getResult();
    }

    /**
     * 更新
     * @param
     */
    @RequestMapping(value = "", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)
    public Boolean update{{model}}(@RequestBody {{model}} {{LowerCase model}}) {
        Response<Boolean> response = {{LowerCase model}}WriteService.update({{LowerCase model}});
        if (!response.isSuccess()) {
            throw new JsonResponseException(500, response.getError());
        }
        return response.getResult();
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    public Boolean delete{{model}}(@PathVariable Long id) {
        Response<Boolean> response = {{LowerCase model}}WriteService.delete(id);
        if (!response.isSuccess()) {
            throw new JsonResponseException(500, response.getError());
        }
        return response.getResult();
    }

   /**
    * 列表
    * @return
    */
    @RequestMapping(value = "/list", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public List<{{model}}> list{{model}}() {
       Map<String, Object> criteria = Maps.newHashMap();
       Response<List<{{model}}>> result =  {{LowerCase model}}ReadService.list(criteria);
       if(!result.isSuccess()){
           throw new JsonResponseException(result.getError());
       }
       return result.getResult();
    }
}