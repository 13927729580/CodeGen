
import io.terminus.paas.common.log
import io.terminus.paas.common.model.Paging
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import org.springframework.web.bind.annotation.RequestParam
import org.springframework.web.bind.annotation.RestController

#ImportPackage(${model})
#ImportPackage("${model}Service")

/**
 *
 * @author $!{email}
 * @date ${Now}
 * Created by CodeGen .
*/
@RestController
@RequestMapping("/api")
class ${model}s @Autowired constructor(
    val #LowerCase(${model})Service: ${model}Service
) {
    val log = log(this)

    @RequestMapping("/{id}", method = arrayOf(RequestMethod.GET))
    fun findById(@PathVariable id: Long): ${model}? {
        return #LowerCase(${model})Service.findById(id)
    }

    @RequestMapping("/paging", method = arrayOf(RequestMethod.GET))
    fun pageJob(@RequestParam(required = false) pageNo: Int?,
                @RequestParam(required = false) pageSize: Int?,
                @RequestParam(required = false) criteria: Map<String, Any>): Paging<${model}> {
        return #LowerCase(${model})Service.paging(pageNo ?: 1, pageSize ?: 10)!!
    }

    @RequestMapping("", method = arrayOf(RequestMethod.POST))
    fun create(@RequestBody #LowerCase(${model}): ${model}): Long {
        return #LowerCase(${model})Service.create(#LowerCase(${model}))
    }

    @RequestMapping("", method = arrayOf(RequestMethod.PUT))
    fun update(@RequestBody #LowerCase(${model}): ${model}) {
        #LowerCase(${model})Service.update(#LowerCase(${model}))
    }

    @RequestMapping("/{id}", method = arrayOf(RequestMethod.DELETE))
    fun delete(@PathVariable id: Long) {
        #LowerCase(${model})Service.delete(id)
    }
}