<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
 ~
 ~ @author: ${email}
 ~ @date: ${Now}
 ~ Created by CodeGen .
-->

<mapper namespace="${model}">
    <resultMap id="${model}Map" type="${model}">
        <id property="id" column="id"/>
        #foreach($item in $fields)
            <result property="${item.field}" column="${item.column}"/>
        #end
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <sql id="tb">
        ${table}
    </sql>

    <sql id="cols_all">
        id,
        <include refid="cols_exclude_id"/>
    </sql>

    <sql id="cols_exclude_id">
        {{#each fields}}`{{column}}`, {{/each}}
        #foreach($item in $fields)
            `${item.column}`,
        #end
        created_at, updated_at
    </sql>

    <sql id="vals">
        #foreach($item in $fields)
            #{${item.column}},
        #end
        now(), now()
    </sql>

    <sql id="criteria">
        <where>
            #foreach($item in $fields)
                <if test="${item.field} != null">AND `${item.column}` = #{${item.field}}</if>
            #end
            <if test="createdAt != null">AND <![CDATA[created_at >= #{createdAt}]]> </if>
            <if test="updatedAt != null">AND <![CDATA[updated_at < #{updatedAt}]]> </if>
        </where>
    </sql>

    <insert id="create" parameterType="${model}" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO
        <include refid="tb"/>
        (<include refid="cols_exclude_id"/>)
        VALUES
        (<include refid="vals"/>)
    </insert>


    <insert id="creates" parameterType="${model}" useGeneratedKeys="true">
        INSERT INTO
        <include refid="table_name"/>
        (<include refid="columns_exclude_id"/>)
        VALUES
        <foreach collection="list" item="i" index="index" separator="," >
            (#foreach($item in $fields)
                #{i.${item.field}},
             #end
            now(), now())
        </foreach>
    </insert>

    <select id="findById" parameterType="long" resultMap="${model}Map">
        SELECT
        <include refid="cols_all"/>
        FROM
        <include refid="tb"/>
        WHERE id = #{id} LIMIT 1
    </select>

    <select id="findByIds" parameterType="list" resultMap="${model}Map">
        SELECT
        <include refid="cols_all"/>
        FROM
        <include refid="tb"/>
        WHERE id IN
        <foreach item="id" collection="list" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <update id="update" parameterType="${model}">
        UPDATE
        <include refid="tb"/>
        <set>
            #foreach($item in $fields)
                <if test="${item.field} != null">`${item.column}` = #{i.${item.field}},</if>
            #end
            updated_at = now()
        </set>
        WHERE id = #{id}
    </update>

    <delete id="delete" parameterType="long">
        DELETE FROM <include refid="tb"/>
        WHERE id = #{id}
    </delete>
    
    <select id="count" parameterType="map" resultType="long">
        SELECT COUNT(1)
        FROM <include refid="tb"/>
        <include refid="criteria"/>
    </select>

    <select id="paging" parameterType="map" resultMap="${model}Map">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        <include refid="criteria"/>
        ORDER BY `id` DESC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="list" parameterType="map" resultMap="${model}Map">
        SELECT <include refid="cols_all"/>
        FROM <include refid="tb"/>
        <include refid="criteria"/>
        ORDER BY `id` DESC
    </select>

</mapper>
