
import io.terminus.boot.rpc.common.annotation.RpcConsumer;
import io.terminus.common.exception.JsonResponseException;
import io.terminus.common.model.Paging;
import io.terminus.common.model.Response;

import lombok.extern.slf4j.Slf4j;
import com.google.common.collect.Maps;

import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.*;

import java.util.Map;
import java.util.List;

/**
 *
 * @author: ${email}
 * @date: ${Now}
 * Created by CodeGen .
 */
@Slf4j
@RestController
@RequestMapping
public class ${model}s {

    @RpcConsumer
    private ${model}WriteService ${model}WriteService;

    @RpcConsumer
    private ${model}ReadService ${model}ReadService;

    /**
     * 查询
     * @param id
     * @return
     */
    @GetMapping(value = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ${model} find${model}(@PathVariable Long id) {
        Response<${model}> response =  ${model}ReadService.findById(id);
        if (!response.isSuccess()) {
            throw new JsonResponseException(500, response.getError());
        }
        return response.getResult();
    }

    /**
     * 分页
     * @param pageNo
     * @param pageSize
     * @return
     */
    @GetMapping(value = "/paging", produces = MediaType.APPLICATION_JSON_VALUE)
    public Paging<${model}> paging${model}(@RequestParam(value = "pageNo", required = false) Integer pageNo,
                                                 @RequestParam(value = "pageSize", required = false) Integer pageSize) {

        Map<String, Object> criteria = Maps.newHashMap();

        Response<Paging<${model}>> result =  ${model}ReadService.paging(pageNo, pageSize, criteria);
        if(!result.isSuccess()){
            throw new JsonResponseException(result.getError());
        }
        return result.getResult();
    }

    /**
     * 创建
     * @param {{LowerCase model}}
     * @return
     */
    @PostMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    public Long create${model}(@RequestBody ${model} ${model}) {
        Response<Long> response = ${model}WriteService.create(${model});
        if (!response.isSuccess()) {
            throw new JsonResponseException(500, response.getError());
        }
        return response.getResult();
    }

    /**
     * 更新
     * @param ${model}
     * @return
     */
    @PutMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    public Boolean update${model}(@RequestBody ${model} ${model}) {
        Response<Boolean> response = ${model}WriteService.update(${model});
        if (!response.isSuccess()) {
            throw new JsonResponseException(500, response.getError());
        }
        return response.getResult();
    }

    /**
    * 删除
    * @param id
    * @return
    */
    @DeleteMapping(value = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public Boolean delete${model}(@PathVariable Long id) {
        Response<Boolean> response = ${model}WriteService.delete(id);
        if (!response.isSuccess()) {
            throw new JsonResponseException(500, response.getError());
        }
        return response.getResult();
    }

   /**
    * 列表
    * @return
    */
    @GetMapping(value = "/list", produces = MediaType.APPLICATION_JSON_VALUE)
    public List<${model}> list{{model}}() {
       Map<String, Object> criteria = Maps.newHashMap();
       Response<List<${model}>> result =  ${model}ReadService.list(criteria);
       if(!result.isSuccess()){
           throw new JsonResponseException(result.getError());
       }
       return result.getResult();
    }
}